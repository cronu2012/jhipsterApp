package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FeeProdCerfCompanyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeeProdCerfCompanyAllPropertiesEquals(FeeProdCerfCompany expected, FeeProdCerfCompany actual) {
        assertFeeProdCerfCompanyAutoGeneratedPropertiesEquals(expected, actual);
        assertFeeProdCerfCompanyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeeProdCerfCompanyAllUpdatablePropertiesEquals(FeeProdCerfCompany expected, FeeProdCerfCompany actual) {
        assertFeeProdCerfCompanyUpdatableFieldsEquals(expected, actual);
        assertFeeProdCerfCompanyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeeProdCerfCompanyAutoGeneratedPropertiesEquals(FeeProdCerfCompany expected, FeeProdCerfCompany actual) {
        assertThat(expected)
            .as("Verify FeeProdCerfCompany auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeeProdCerfCompanyUpdatableFieldsEquals(FeeProdCerfCompany expected, FeeProdCerfCompany actual) {
        assertThat(expected)
            .as("Verify FeeProdCerfCompany relevant properties")
            .satisfies(e -> assertThat(e.getFee()).as("check fee").isEqualTo(actual.getFee()))
            .satisfies(e -> assertThat(e.getFeeType()).as("check feeType").isEqualTo(actual.getFeeType()))
            .satisfies(e -> assertThat(e.getFeeDt()).as("check feeDt").isEqualTo(actual.getFeeDt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeeProdCerfCompanyUpdatableRelationshipsEquals(FeeProdCerfCompany expected, FeeProdCerfCompany actual) {
        assertThat(expected)
            .as("Verify FeeProdCerfCompany relationships")
            .satisfies(e -> assertThat(e.getProd()).as("check prod").isEqualTo(actual.getProd()))
            .satisfies(e -> assertThat(e.getCerf()).as("check cerf").isEqualTo(actual.getCerf()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }
}
